generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique() @db.VarChar(50)
  firstName String   @map("first_name") @db.VarChar(50)
  lastName  String   @map("last_name") @db.VarChar(50)
  email     String   @unique()
  password  String   @db.VarChar(100)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders PurchaseOrders?

  @@map("users")
}

// model Address {
//   id         String   @id @default(uuid())
//   zipCode    String
//   state      String
//   city       String
//   street     String
//   number     String
//   complement String?
//   createdAt  DateTime @default(now()) @map("created_at")
//   updatedAt  DateTime @updatedAt @map("updated_at")
//   userId     String   @unique @map("user_id")
//   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
//   @@map("addresses")
// }

enum OrdersStatus {
  CREATED
  RUNNING
  DONE
  FAILURE
}

model PurchaseOrders {
  id                 String               @id @default(uuid())
  status             OrdersStatus
  paid               Boolean              @default(false)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  userId             String               @unique @map("user_id")
  user               User                 @relation(fields: [userId], references: [id])
  purchaseOrderItems PurchaseOrderItems[]

  @@map("purchase_orders")
}

model Product {
  id                 String               @id @default(uuid())
  title              String               @db.VarChar(30)
  description        String               @db.Text
  price              Decimal              @db.Decimal(11, 2)
  stock              Int
  sku                Int                  @unique
  brand              String               @db.VarChar(120)
  categoryId         String               @map("category_id")
  imgUrl             String?              @db.Text
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  purchaseOrderItems PurchaseOrderItems[]

  @@index([categoryId])
  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model PurchaseOrderItems {
  id              String         @id @default(uuid())
  productId       String         @map("product_id")
  purchaseOrderId String         @map("purchase_order_id")
  price           Decimal        @db.Decimal(15, 2)
  quantity        Int
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  product         Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  order           PurchaseOrders @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([purchaseOrderId])
  @@map("purchase_order_items")
}
